<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interview Predictor</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            padding: 40px;
            max-width: 1000px;
            width: 100%;
        }
        h1 { text-align: center; color: #667eea; margin-bottom: 10px; font-size: 2em; }
        .subtitle { text-align: center; color: #666; margin-bottom: 30px; }
        .tabs { display: flex; gap: 10px; margin-bottom: 30px; border-bottom: 2px solid #eee; }
        .tab {
            padding: 15px 25px; background: none; border: none; cursor: pointer;
            font-size: 16px; color: #666; border-bottom: 3px solid transparent; transition: all 0.3s;
        }
        .tab.active { color: #667eea; border-bottom-color: #667eea; font-weight: bold; }
        .tab-content { display: none; }
        .tab-content.active { display: block; }
        .upload-area {
            border: 3px dashed #667eea; border-radius: 15px; padding: 40px;
            text-align: center; cursor: pointer; transition: all 0.3s; margin-bottom: 20px;
        }
        .upload-area:hover { background: #f8f9ff; border-color: #764ba2; }
        .upload-icon { font-size: 48px; margin-bottom: 15px; }
        .file-input { display: none; }
        .model-selector { margin: 20px 0; }
        select {
            width: 100%; padding: 15px; border: 2px solid #ddd;
            border-radius: 10px; font-size: 16px; cursor: pointer;
        }
        .analyze-btn {
            width: 100%; padding: 18px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; border: none; border-radius: 10px;
            font-size: 18px; font-weight: bold; cursor: pointer; transition: transform 0.2s;
        }
        .analyze-btn:hover { transform: translateY(-2px); }
        .analyze-btn:disabled { opacity: 0.6; cursor: not-allowed; transform: none; }
        .progress-container { display: none; margin: 30px 0; }
        .progress-bar {
            width: 100%; height: 30px; background: #eee;
            border-radius: 15px; overflow: hidden; margin-bottom: 10px;
        }
        .progress-fill {
            height: 100%; background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            transition: width 0.5s; display: flex; align-items: center;
            justify-content: center; color: white; font-weight: bold;
        }
        .progress-message { text-align: center; color: #666; font-style: italic; }
        .spinner-container { display: none; text-align: center; margin: 30px 0; }
        .spinner {
            border: 4px solid #f3f3f3; border-top: 4px solid #667eea;
            border-radius: 50%; width: 50px; height: 50px;
            animation: spin 1s linear infinite; margin: 0 auto 15px;
        }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .spinner-message { color: #666; font-style: italic; }
        .results { display: none; margin-top: 30px; }
        .prediction-card {
            padding: 30px; border-radius: 15px; text-align: center;
            margin-bottom: 30px; border: 3px solid;
        }
        .prediction-card.likely {
            background: #d4edda; border-color: #28a745; color: #155724;
        }
        .prediction-card.unlikely {
            background: #f8d7da; border-color: #dc3545; color: #721c24;
        }
        .prediction-card.inconclusive {
            background: #fff3cd; border-color: #ffc107; color: #856404;
        }
        .score { font-size: 3em; font-weight: bold; margin: 15px 0; }
        .components { margin-top: 30px; }
        .component {
            background: #f8f9fa; padding: 20px; border-radius: 10px;
            margin-bottom: 15px; transition: transform 0.2s;
        }
        .component:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
        .component-header {
            display: flex; justify-content: space-between;
            align-items: center; margin-bottom: 10px; font-weight: bold;
        }
        .component-bar {
            width: 100%; height: 20px; background: #e9ecef;
            border-radius: 10px; overflow: hidden;
        }
        .component-fill {
            height: 100%; background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            transition: width 0.5s;
        }
        .component-explanation { margin-top: 10px; color: #666; font-size: 14px; font-style: italic; }
        .timeline-section { margin: 30px 0; }
        .timeline-title {
            font-size: 20px; font-weight: bold; color: #667eea;
            margin-bottom: 15px; text-align: center;
        }
        .timeline-container {
            display: flex; height: 50px; border-radius: 10px;
            overflow: hidden; margin-bottom: 10px; cursor: pointer;
        }
        .timeline-segment { transition: opacity 0.2s; }
        .timeline-segment:hover { opacity: 0.8; }
        .timeline-segment.green { background: #28a745; }
        .timeline-segment.yellow { background: #ffc107; }
        .timeline-segment.red { background: #dc3545; }
        .timeline-legend {
            display: flex; justify-content: center; gap: 20px;
            margin-bottom: 20px; font-size: 14px;
        }
        .legend-item { display: flex; align-items: center; gap: 8px; }
        .legend-color {
            width: 20px; height: 20px; border-radius: 4px;
        }
        .legend-color.green { background: #28a745; }
        .legend-color.yellow { background: #ffc107; }
        .legend-color.red { background: #dc3545; }
        .segment-details {
            background: #f8f9fa; padding: 20px; border-radius: 10px;
            margin-top: 15px; display: none;
        }
        .segment-details.active { display: block; }
        .segment-time {
            font-weight: bold; color: #667eea; margin-bottom: 10px;
        }
        .segment-text { color: #333; line-height: 1.6; }
        textarea {
            width: 100%; min-height: 300px; padding: 15px;
            border: 2px solid #ddd; border-radius: 10px;
            font-family: inherit; font-size: 14px; resize: vertical;
        }
        .model-guide {
            background: #f8f9fa; padding: 20px; border-radius: 10px;
            margin-bottom: 20px;
        }
        .model-guide h3 {
            color: #667eea; margin-bottom: 15px;
        }
        .model-option {
            padding: 10px; margin-bottom: 10px;
            border-left: 3px solid #667eea;
            padding-left: 15px;
        }
        .model-option strong { display: block; margin-bottom: 5px; }
        .model-option span { font-size: 14px; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üé§ Interview Success Predictor</h1>
        <p class="subtitle">AI-powered analysis of interview performance</p>
        
        <div class="tabs">
            <button class="tab active" onclick="APP.switchTab('audio', this)">Audio Analysis</button>
            <button class="tab" onclick="APP.switchTab('transcript', this)">Transcript Analysis</button>
        </div>
        
        <div id="audio-tab" class="tab-content active">
            <div class="model-guide">
                <h3>üìä Model Selection Guide</h3>
                <div id="model-guide-content">Loading model information...</div>
            </div>
            
            <div class="upload-area" onclick="document.getElementById('audioFile').click()">
                <div class="upload-icon">üìÅ</div>
                <p>Click to upload or drag & drop your interview audio</p>
                <p style="font-size: 14px; color: #999; margin-top: 10px;">
                    Supported formats: MP3, WAV, M4A, OGG (Max 200MB)
                </p>
                <input type="file" id="audioFile" class="file-input" 
                       accept="audio/*" onchange="APP.handleFileSelect(event)">
                <p id="selected-file" style="margin-top: 15px; color: #667eea; font-weight: bold;"></p>
            </div>
            
            <div class="model-selector">
                <label for="modelSize" style="display: block; margin-bottom: 10px; font-weight: bold;">
                    Select Whisper Model:
                </label>
                <select id="modelSize">
                    <option value="tiny">Tiny (Fast) - 3-5 min for 30min audio</option>
                    <option value="base" selected>Base (Recommended) - 5-8 min for 30min audio</option>
                    <option value="small">Small (High Accuracy) - 10-15 min for 30min audio</option>
                    <option value="medium">Medium (Maximum Accuracy) - 20-30 min for 30min audio</option>
                </select>
            </div>
            
            <button class="analyze-btn" id="analyzeAudioBtn" onclick="APP.analyzeAudio()" disabled>
                Analyze Interview
            </button>
            
            <div class="progress-container" id="progressContainer">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill">0%</div>
                </div>
                <p class="progress-message" id="progressMessage">Initializing...</p>
            </div>
        </div>
        
        <div id="transcript-tab" class="tab-content">
            <textarea id="transcriptText" placeholder="Paste your interview transcript here..."></textarea>
            <button class="analyze-btn" id="analyzeTextBtn" onclick="APP.analyzeText()" style="margin-top: 20px;">
                Analyze Transcript
            </button>
            
            <div class="spinner-container" id="spinnerContainer">
                <div class="spinner"></div>
                <p class="spinner-message">Analyzing transcript...</p>
            </div>
        </div>
        
        <div class="results" id="results"></div>
    </div>
    
    <script>
(function () {
  'use strict';

  const APP = {
    selectedFile: null,
    ws: null,
    clientId: Math.random().toString(36).substring(7),
    componentExplanations: {},
    currentTimeline: null,

    init() {
      fetch('/api/model-info')
        .then(r => r.json())
        .then(data => {
          this.componentExplanations = data.component_explanations || {};
          const guideHtml = (data.models || []).map(m => `
            <div class="model-option">
              <strong>${m.display}</strong>
              <span>${m.size} | ${m.accuracy} | ${m.time_30min} (30min) | ${m.time_60min} (60min)</span><br>
              <span>Best for: ${m.best_for}</span>
            </div>
          `).join('');
          document.getElementById('model-guide-content').innerHTML = guideHtml || '‚Äî';
        });
    },

    pick(obj, keys) { for (const k of keys) if (obj && obj[k] != null) return obj[k]; return null; },
    normPct(val) {
      if (val == null || val === '') return null;
      let n = (typeof val === 'string') ? parseFloat(val.replace('%','')) : Number(val);
      if (Number.isNaN(n)) return null;
      if (n >= 0 && n <= 1) n = n * 100;
      n = Math.max(0, Math.min(100, n));
      return Math.round(n * 100) / 100;
    },

    switchTab(tab, el) {
      document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
      document.querySelectorAll('.tab-content').forEach(t => t.classList.remove('active'));
      el.classList.add('active');
      document.getElementById(tab + '-tab').classList.add('active');
      document.getElementById('results').style.display = 'none';
      document.getElementById('progressContainer').style.display = 'none';
      document.getElementById('spinnerContainer').style.display = 'none';
    },

    handleFileSelect(event) {
      this.selectedFile = event.target.files[0];
      if (this.selectedFile) {
        const sizeMB = (this.selectedFile.size / 1024 / 1024).toFixed(1);
        document.getElementById('selected-file').textContent =
          `${this.selectedFile.name} (${sizeMB} MB)`;
        document.getElementById('analyzeAudioBtn').disabled = false;
      }
    },

    connectWebSocket() {
      this.ws = new WebSocket(`ws://${window.location.host}/ws/${this.clientId}`);
      this.ws.onmessage = (event) => {
        let data; try { data = JSON.parse(event.data); } catch { return; }
        if (typeof data.progress === 'number') {
          this.updateProgress(data.progress, data.message || '');
        }
      };
    },

    updateProgress(percent, message) {
      const fill = document.getElementById('progressFill');
      fill.style.width = percent + '%';
      fill.textContent = percent + '%';
      document.getElementById('progressMessage').textContent = message;
    },

    async analyzeAudio() {
      if (!this.selectedFile) return;

      this.updateProgress(0, 'Starting analysis...');
      document.getElementById('analyzeAudioBtn').disabled = true;
      document.getElementById('progressContainer').style.display = 'block';
      document.getElementById('results').style.display = 'none';

      this.connectWebSocket();

      const formData = new FormData();
      formData.append('file', this.selectedFile);
      formData.append('model_size', document.getElementById('modelSize').value);
      formData.append('client_id', this.clientId);

      try {
        const response = await fetch('/api/analyze-audio', { method: 'POST', body: formData });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const result = await response.json();
        this.displayResults(result);
      } catch (error) {
        alert('Error: ' + error.message);
      } finally {
        document.getElementById('analyzeAudioBtn').disabled = false;
        document.getElementById('progressContainer').style.display = 'none';
        if (this.ws) this.ws.close();
      }
    },

    async analyzeText() {
      const text = document.getElementById('transcriptText').value;
      if (!text.trim()) { alert('Please paste a transcript first'); return; }

      document.getElementById('analyzeTextBtn').disabled = true;
      document.getElementById('spinnerContainer').style.display = 'block';
      document.getElementById('results').style.display = 'none';

      const formData = new FormData();
      formData.append('transcript', text);

      try {
        const response = await fetch('/api/analyze-text', { method: 'POST', body: formData });
        const result = await response.json();
        this.displayResults(result);
      } catch (error) {
        alert('Error: ' + error.message);
      } finally {
        document.getElementById('analyzeTextBtn').disabled = false;
        document.getElementById('spinnerContainer').style.display = 'none';
      }
    },

    formatTime(seconds) {
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${mins}:${secs.toString().padStart(2, '0')}`;
    },

    displayTimeline(timeline) {
      if (!timeline || !timeline.bins || !timeline.bins.length) return '';
      this.currentTimeline = timeline;
      const total = timeline.duration || (timeline.bins.at(-1)?.end || 1);

      let html = `<div class="timeline-section">
        <div class="timeline-title">Performance Timeline</div>
        <div class="timeline-container">`;

      timeline.bins.forEach((bin, i) => {
        const widthPercent = ((bin.end - bin.start) / total) * 100;
        const binScore = this.normPct(this.pick(bin, ['score','pct','percentage']));
        const color = bin.color || (binScore >= 70 ? 'green' : binScore >= 40 ? 'yellow' : 'red');
        const label = bin.label || (binScore != null ? `${binScore}%` : '');
        html += `<div class="timeline-segment ${color}" style="width:${widthPercent}%"
                  onclick="APP.showSegmentDetails(${i})"
                  title="${this.formatTime(bin.start)}-${this.formatTime(bin.end)}: ${label}"></div>`;
      });

      html += `</div>
        <div class="timeline-legend">
          <div class="legend-item"><div class="legend-color green"></div><span>Strong (70%+)</span></div>
          <div class="legend-item"><div class="legend-color yellow"></div><span>Okay (40-70%)</span></div>
          <div class="legend-item"><div class="legend-color red"></div><span>Weak (&lt;40%)</span></div>
        </div>
        <div id="segment-details-container"></div>
      </div>`;
      return html;
    },

    showSegmentDetails(index) {
      if (!this.currentTimeline) return;
      const bin = this.currentTimeline.bins[index];
      const container = document.getElementById('segment-details-container');
      const texts = bin.segments ? bin.segments.map(s => s.text).join(' ') : 'No transcript';
      const binScore = this.normPct(this.pick(bin, ['score','pct','percentage']));
      const label = bin.label || (binScore != null ? `${binScore}%` : '');
      container.innerHTML = `<div class="segment-details active">
        <div class="segment-time">Time: ${this.formatTime(bin.start)} - ${this.formatTime(bin.end)} | Performance: ${label}</div>
        <div class="segment-text">${texts}</div>
      </div>`;
    },

    displayResults(raw) {
      console.log("=== displayResults called ===");
      console.log("Raw data:", raw);
      console.log("=== displayResults called ===");
      console.log("Raw data:", raw);
      const result = raw?.result || raw?.data || raw || {};
      const prediction = this.pick(result, ['prediction','label','verdict']) || 'Inconclusive';
      const predictionClass = String(prediction).toLowerCase();
      const emoji = predictionClass === 'likely' ? '‚úÖ' : predictionClass === 'unlikely' ? '‚ùå' : '‚ö†Ô∏è';

      const scoreRaw = this.pick(result, ['score','final_score','overall_score','probability','agg_score','aggregate']);
      const score = this.normPct(scoreRaw);
      const scoreText = (score != null) ? `${score}%` : '‚Äî';

      const confidence = this.pick(result, ['confidence','confidence_label','conf']) || 'N/A';

      const compSrc = this.pick(result, ['component_scores','components']) || {};
      let componentsHtml = '';
      for (const [key, val] of Object.entries(compSrc)) {
        const pct = this.normPct(val);
        const valueText = (pct != null) ? `${pct}%` : (val ?? '‚Äî');
        const name = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        const explanation = this.componentExplanations[key] || '';
        const width = (pct != null) ? `${pct}%` : '0%';
        componentsHtml += `<div class="component">
          <div class="component-header"><span>${name}</span><span>${valueText}</span></div>
          <div class="component-bar"><div class="component-fill" style="width:${width}"></div></div>
          <div class="component-explanation">${explanation}</div>
        </div>`;
      }

      const timeline = this.pick(result, ['timeline','timebins','time_bins']);
      const timelineHtml = timeline ? this.displayTimeline(timeline) : '';

      let html = `
        <div class="prediction-card ${predictionClass}">
          <div style="font-size: 3em;">${emoji}</div>
          <h2>${prediction}</h2>
          <div class="score">${scoreText}</div>
          <p>Confidence: ${confidence}</p>
        </div>
        ${timelineHtml}
        <div class="components">
          <h3 style="margin-bottom: 20px; color: #667eea;">Component Breakdown</h3>
          ${componentsHtml}
        </div>
      `;

      if (score == null && !prediction) {
        html += `<pre style="margin-top:16px; background:#f7f7f9; padding:12px; border-radius:8px; overflow:auto;">${escapeHTML(JSON.stringify(result, null, 2))}</pre>`;
        console.info('Diagnostic: unrecognized result shape', result);
      }

      const resultsEl = document.getElementById('results');
      resultsEl.innerHTML = html;
      resultsEl.style.display = 'block';
      resultsEl.scrollIntoView({ behavior: 'smooth' });
    }
  };

  function escapeHTML(s){return String(s).replace(/[&<>"']/g,m=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;' }[m]));}

  window.APP = APP;
  APP.init();
  });

  window.APP = APP;
  APP.init();
  window.APP = APP;  APP.init();
})();
</script>
</body>
</html>
